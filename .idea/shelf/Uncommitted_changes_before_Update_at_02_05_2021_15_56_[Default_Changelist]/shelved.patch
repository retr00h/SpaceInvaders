Index: app/src/main/res/layout-land/fragment_start_page.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/startPageFragment\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@color/black\"\r\n    tools:context=\".StartPageFragment\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/gameTitle\"\r\n        android:layout_width=\"210dp\"\r\n        android:layout_height=\"132dp\"\r\n        android:layout_marginTop=\"100dp\"\r\n        android:editable=\"false\"\r\n        android:gravity=\"center\"\r\n        android:text=\"@string/gameTitle\"\r\n        android:textColor=\"@color/white\"\r\n        android:textSize=\"36sp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.499\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <androidx.appcompat.widget.AppCompatButton\r\n        android:id=\"@+id/startButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"@drawable/outlined_button\"\r\n        android:text=\"@string/startButton\"\r\n        android:textColor=\"@drawable/button_text_color\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/resumeButton\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/resumeButton\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toStartOf=\"parent\" />\r\n\r\n    <androidx.appcompat.widget.AppCompatButton\r\n        android:id=\"@+id/resumeButton\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:background=\"@drawable/outlined_button\"\r\n        android:text=\"@string/resume_game\"\r\n        android:textColor=\"@drawable/button_text_color\"\r\n        app:layout_constraintBottom_toBottomOf=\"@+id/newActivity\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/newActivity\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/startButton\" />\r\n\r\n    <androidx.appcompat.widget.AppCompatButton\r\n        android:id=\"@+id/newActivity\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"@string/customButton\"\r\n        android:background=\"@drawable/outlined_button\"\r\n        android:textColor=\"@drawable/button_text_color\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.5\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/resumeButton\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/gameTitle\"\r\n        app:layout_constraintVertical_bias=\"0.577\" />\r\n\r\n    <ImageButton\r\n        android:id=\"@+id/imageButtonOption\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"16dp\"\r\n        android:layout_marginEnd=\"16dp\"\r\n        android:background=\"@drawable/transparent_button\"\r\n        android:src=\"@drawable/ic_baseline_settings_36\"\r\n        android:tint=\"@drawable/button_text_color\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout-land/fragment_start_page.xml	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/res/layout-land/fragment_start_page.xml	(date 1619862332680)
@@ -42,13 +42,13 @@
         android:background="@drawable/outlined_button"
         android:text="@string/resume_game"
         android:textColor="@drawable/button_text_color"
-        app:layout_constraintBottom_toBottomOf="@+id/newActivity"
-        app:layout_constraintEnd_toStartOf="@+id/newActivity"
+        app:layout_constraintBottom_toBottomOf="@+id/customizationActivity"
+        app:layout_constraintEnd_toStartOf="@+id/customizationActivity"
         app:layout_constraintHorizontal_bias="0.5"
         app:layout_constraintStart_toEndOf="@+id/startButton" />
 
     <androidx.appcompat.widget.AppCompatButton
-        android:id="@+id/newActivity"
+        android:id="@+id/customizationActivity"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:text="@string/customButton"
Index: app/src/main/java/com/devfabiocirelli/spaceinvaders/CustomizationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.devfabiocirelli.spaceinvaders\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport kotlinx.android.synthetic.main.activity_customization.*\r\n\r\nclass CustomizationActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_customization)\r\n\r\n        //array delle immagini delle navi <da modificare>\r\n        val ship = arrayOf(\r\n            R.mipmap.ic_launcher, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher_round\r\n        )\r\n\r\n        //array di colori <da modificare>\r\n        val colors = arrayOf(\r\n            R.color.green, R.color.blue, R.color.red, R.color.grey, R.color.white, R.color.darkGrey\r\n        )\r\n        //Popola le listView con le immagini e i colori disponibili\r\n        list_view_ship.adapter = MyAdapter(this, ship, R.layout.ship_model_view)\r\n        list_view_color.adapter = MyAdapter(this, colors, R.layout.ship_color_view)\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/devfabiocirelli/spaceinvaders/CustomizationActivity.kt	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/java/com/devfabiocirelli/spaceinvaders/CustomizationActivity.kt	(date 1619962966108)
@@ -2,19 +2,33 @@
 
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
+import android.util.DisplayMetrics
+import android.util.Log
+import com.google.firebase.database.DataSnapshot
+import com.google.firebase.database.DatabaseError
+import com.google.firebase.database.ValueEventListener
 import kotlinx.android.synthetic.main.activity_customization.*
+import kotlinx.android.synthetic.main.fragment_game.*
+import java.util.*
+
+class CustomizationActivity(private val mainActivity: MainActivity?) : AppCompatActivity() {
 
-class CustomizationActivity : AppCompatActivity() {
+    private val referenceValueListener = getSettingsReferenceValueListener()
+    private var customization: Customization? = null
+    private val TAG = "CustomizationActivity"
+
+    constructor(): this(null)
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_customization)
 
-        //array delle immagini delle navi <da modificare>
+        //TODO: array delle immagini delle navi
         val ship = arrayOf(
             R.mipmap.ic_launcher, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher, R.mipmap.ic_launcher_round, R.mipmap.ic_launcher_round
         )
 
-        //array di colori <da modificare>
+        //TODO: array di colori
         val colors = arrayOf(
             R.color.green, R.color.blue, R.color.red, R.color.grey, R.color.white, R.color.darkGrey
         )
@@ -23,4 +37,40 @@
         list_view_color.adapter = MyAdapter(this, colors, R.layout.ship_color_view)
 
     }
+
+    override fun onStart() {
+        super.onStart()
+        mainActivity?.userReference?.child("customization")?.addValueEventListener(referenceValueListener)
+    }
+
+    override fun onStop() {
+        super.onStop()
+        mainActivity?.userReference?.child("customization")?.removeEventListener(referenceValueListener)
+    }
+
+    private fun getSettingsReferenceValueListener(): ValueEventListener {
+        return object: ValueEventListener {
+
+            override fun onDataChange(snapshot: DataSnapshot) {
+                customization = snapshot.getValue(Customization::class.java)
+                val dm: DisplayMetrics = resources.displayMetrics
+                val conf = resources.configuration
+                if (customization == null) {
+                    customization = Customization(R.color.black, R.mipmap.ic_launcher)
+                    mainActivity!!.userReference.child("customization").setValue(customization)
+                    player.choseShip(R.mipmap.ic_launcher)
+
+                } else {
+                    //qui i parametri non possono essere null
+                    player.choseShip(customization!!.ship!!)
+                }
+                resources.updateConfiguration(conf, dm)
+            }
+
+            override fun onCancelled(error: DatabaseError) {
+                Log.i(TAG, "ERRORRRRR")
+            }
+        }
+    }
+
 }
\ No newline at end of file
Index: app/src/main/java/com/devfabiocirelli/spaceinvaders/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.devfabiocirelli.spaceinvaders\r\n\r\nimport android.os.Bundle\r\nimport android.util.DisplayMetrics\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.database.*\r\nimport com.google.firebase.ktx.Firebase\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    val TAG = \"MainActivity\"\r\n    private var referenceValueListener = getSettingsReferenceValueListener()\r\n    private lateinit var auth: FirebaseAuth\r\n    lateinit var database: FirebaseDatabase\r\n    lateinit var reference: DatabaseReference\r\n    var user: FirebaseUser? = null\r\n    var settings: Settings? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        Log.i(TAG, \"onCreate\")\r\n\r\n        // autentica in modo anonimo\r\n        auth = Firebase.auth\r\n        user = auth.currentUser\r\n        auth.signInAnonymously()\r\n            .addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    Log.d(TAG, \"signInAnonymously:success\")\r\n                    user = auth.currentUser\r\n                } else {\r\n                    // If sign in fails, display a message to the user.\r\n                    Log.w(TAG, \"signInAnonymously:failure\", task.exception)\r\n                    Toast.makeText(baseContext, \"Authentication failed.\",\r\n                        Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n        // setta la variabile database e dà a reference la root dell'utente autenticato\r\n        database = FirebaseDatabase.getInstance()\r\n        reference = database.reference.child(\"${user?.uid}\")\r\n\r\n        // crea un'istanza di StartPageFragment, che viene inserita nel contentFragment e visualizzata\r\n        val fragment = StartPageFragment(this)\r\n        val fragmentManager = supportFragmentManager\r\n        val transaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n        transaction.replace(R.id.contentFragment, fragment)\r\n        transaction.commit()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        reference.child(\"settings\").addValueEventListener(referenceValueListener)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        reference.child(\"settings\").removeEventListener(referenceValueListener)\r\n    }\r\n\r\n    private fun getSettingsReferenceValueListener(): ValueEventListener {\r\n        return object: ValueEventListener {\r\n            // all'avvio, e quando un dato qualunque in userID/settings viene modificato,\r\n            // aggiorna la variabile settings e la lingua a livello di app\r\n            override fun onDataChange(snapshot: DataSnapshot) {\r\n                settings = snapshot.getValue(Settings::class.java)\r\n                val dm: DisplayMetrics = resources.displayMetrics\r\n                val conf = resources.configuration\r\n                if (settings == null) {\r\n                    settings = Settings(true, true, \"en_US\")\r\n                    reference.child(\"settings\").setValue(settings)\r\n                    conf.locale = Locale.ENGLISH\r\n                } else {\r\n                    conf.locale = if (settings!!.locale!!.startsWith(\"en\")) Locale.ENGLISH else Locale.ITALIAN\r\n                }\r\n                resources.updateConfiguration(conf, dm)\r\n            }\r\n\r\n            override fun onCancelled(error: DatabaseError) {\r\n                Log.i(TAG, \"ERRORRRRR\")\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onWindowFocusChanged(hasFocus: Boolean) {\r\n        super.onWindowFocusChanged(hasFocus)\r\n        if (hasFocus) hideSystemUI()\r\n    }\r\n\r\n    private fun hideSystemUI() {\r\n        // Enables regular immersive mode.\r\n        // For \"lean back\" mode, remove SYSTEM_UI_FLAG_IMMERSIVE.\r\n        // Or for \"sticky immersive,\" replace it with SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n        window.decorView.systemUiVisibility = (View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                // Set the content to appear under the system bars so that the\r\n                // content doesn't resize when the system bars hide and show.\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                // Hide the nav bar and status bar\r\n                or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\r\n                or View.SYSTEM_UI_FLAG_FULLSCREEN)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/devfabiocirelli/spaceinvaders/MainActivity.kt	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/java/com/devfabiocirelli/spaceinvaders/MainActivity.kt	(date 1619857667820)
@@ -21,7 +21,7 @@
     private var referenceValueListener = getSettingsReferenceValueListener()
     private lateinit var auth: FirebaseAuth
     lateinit var database: FirebaseDatabase
-    lateinit var reference: DatabaseReference
+    lateinit var userReference: DatabaseReference
     var user: FirebaseUser? = null
     var settings: Settings? = null
 
@@ -48,7 +48,7 @@
 
         // setta la variabile database e dà a reference la root dell'utente autenticato
         database = FirebaseDatabase.getInstance()
-        reference = database.reference.child("${user?.uid}")
+        userReference = database.reference.child("${user?.uid}")
 
         // crea un'istanza di StartPageFragment, che viene inserita nel contentFragment e visualizzata
         val fragment = StartPageFragment(this)
@@ -60,12 +60,12 @@
 
     override fun onStart() {
         super.onStart()
-        reference.child("settings").addValueEventListener(referenceValueListener)
+        userReference.child("settings").addValueEventListener(referenceValueListener)
     }
 
     override fun onStop() {
         super.onStop()
-        reference.child("settings").removeEventListener(referenceValueListener)
+        userReference.child("settings").removeEventListener(referenceValueListener)
     }
 
     private fun getSettingsReferenceValueListener(): ValueEventListener {
@@ -78,7 +78,7 @@
                 val conf = resources.configuration
                 if (settings == null) {
                     settings = Settings(true, true, "en_US")
-                    reference.child("settings").setValue(settings)
+                    userReference.child("settings").setValue(settings)
                     conf.locale = Locale.ENGLISH
                 } else {
                     conf.locale = if (settings!!.locale!!.startsWith("en")) Locale.ENGLISH else Locale.ITALIAN
Index: app/src/main/java/com/devfabiocirelli/spaceinvaders/SettingsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+> package com.devfabiocirelli.spaceinvaders\r\n\r\nimport android.os.Bundle\r\nimport android.util.DisplayMetrics\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport android.widget.Toast\r\nimport androidx.appcompat.widget.SwitchCompat\r\nimport androidx.fragment.app.Fragment\r\nimport kotlinx.android.synthetic.main.fragment_settings.*\r\nimport java.util.*\r\n\r\nclass SettingsFragment(private val mainActivity: MainActivity) : Fragment() {\r\n    val TAG = \"SettingsFragment\"\r\n\r\n        override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n            // Inflate the layout for this fragment\r\n            super.onCreateView(inflater, container, savedInstanceState)\r\n\r\n            /*\r\n                questo blocco di codice e' necessario per instanziare il fragment, prelevare il\r\n                button, e dargli un onClickListener che possa reagire ai clic su di esso\r\n             */\r\n            val rootView = inflater.inflate(R.layout.fragment_settings, container, false)\r\n            val languageBtn = rootView.findViewById<Button>(R.id.languageButton)\r\n            val backBtn = rootView.findViewById<ImageButton>(R.id.imageButtonBack)\r\n            val soundSwitch = rootView.findViewById<SwitchCompat>(R.id.soundSwitch)\r\n            val hapticSwitch = rootView.findViewById<SwitchCompat>(R.id.hapticSwitch)\r\n\r\n            // inizializza gli switch con i valori in settings (che a questo punto dell'esecuzione\r\n            // sono sicuramente non nulli)\r\n            soundSwitch.isChecked = mainActivity.settings!!.audio!!\r\n            hapticSwitch.isChecked = mainActivity.settings!!.vibrations!!\r\n\r\n            // se soundSwitch viene cliccato, vengono creati nuovi Settings coi valori aggiornati\r\n            // e vengono aggiornati anche i valori nel database remoto\r\n            soundSwitch.setOnClickListener {\r\n                Log.i(TAG, \"Sound switch pressed\")\r\n                mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, mainActivity.settings!!.locale)\r\n                mainActivity.reference.child(\"settings\").setValue(mainActivity.settings)\r\n            }\r\n\r\n            // se hapticSwitch viene cliccato, vengono creati nuovi Settings coi valori aggiornati\r\n            // e vengono aggiornati anche i valori nel database remoto\r\n            hapticSwitch.setOnClickListener {\r\n                Log.i(TAG, \"Haptic switch pressed\")\r\n                mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, mainActivity.settings!!.locale)\r\n                mainActivity.reference.child(\"settings\").setValue(mainActivity.settings)\r\n            }\r\n\r\n            // funzione lambda che aggiorna la locale a livello di activity al clic sul bottone,\r\n            // e i valori in settings e nel database remoto\r\n            languageBtn.setOnClickListener {\r\n                Log.i(TAG, \"Change language button pressed\")\r\n                val language = languageBtn.text\r\n\r\n                /*\r\n                    il seguente codice modifica le resources attualmente in uso, nello specifico, crea\r\n                    un nuovo locale (vedere il blocco if) e lo sostituisce a quello attualmente in uso\r\n                 */\r\n                val res = resources\r\n                val dm: DisplayMetrics = res.getDisplayMetrics()\r\n                val conf = res.getConfiguration()\r\n\r\n                val newLocale = if (language == \"Italiano\") {\r\n                    // il testo del bottone cliccato è \"Italiano\", vuol dire che la lingua deve passare\r\n                    // da italiano ad inglese\r\n                    Locale.ENGLISH\r\n                } else {\r\n                    // viceversa\r\n                    Locale.ITALIAN\r\n                }\r\n\r\n                // TODO: il testo del toast è sempre mostrato in Inglese\r\n                Toast.makeText(mainActivity.applicationContext, R.string.language_will_be_applied, Toast.LENGTH_SHORT).show()\r\n\r\n                // vengono creati nuovi Settings coi valori aggiornati\r\n                // e vengono aggiornati anche i valori nel database remoto.\r\n                // non c'è bisogno di aggiornare la lingua qui, in quanto viene aggiornata nel listener\r\n                // su mainActivity.reference.child(\"settings\")\r\n                mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, newLocale.toString())\r\n                mainActivity.reference.child(\"settings\").setValue(mainActivity.settings)\r\n            }\r\n\r\n            // funzione lambda che ritorna allo startFragment al clic sul bottone\r\n            backBtn.setOnClickListener {\r\n                Log.i(TAG, \"Back button pressed\")\r\n                val fragmentManager = this.requireActivity().supportFragmentManager\r\n                fragmentManager.popBackStack()\r\n            }\r\n\r\n            return rootView\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/devfabiocirelli/spaceinvaders/SettingsFragment.kt	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/java/com/devfabiocirelli/spaceinvaders/SettingsFragment.kt	(date 1619857667825)
@@ -8,10 +8,9 @@
 import android.view.ViewGroup
 import android.widget.Button
 import android.widget.ImageButton
+import android.widget.Switch
 import android.widget.Toast
-import androidx.appcompat.widget.SwitchCompat
 import androidx.fragment.app.Fragment
-import kotlinx.android.synthetic.main.fragment_settings.*
 import java.util.*
 
 class SettingsFragment(private val mainActivity: MainActivity) : Fragment() {
@@ -29,8 +28,8 @@
             val rootView = inflater.inflate(R.layout.fragment_settings, container, false)
             val languageBtn = rootView.findViewById<Button>(R.id.languageButton)
             val backBtn = rootView.findViewById<ImageButton>(R.id.imageButtonBack)
-            val soundSwitch = rootView.findViewById<SwitchCompat>(R.id.soundSwitch)
-            val hapticSwitch = rootView.findViewById<SwitchCompat>(R.id.hapticSwitch)
+            val soundSwitch = rootView.findViewById<Switch>(R.id.soundSwitch)
+            val hapticSwitch = rootView.findViewById<Switch>(R.id.hapticSwitch)
 
             // inizializza gli switch con i valori in settings (che a questo punto dell'esecuzione
             // sono sicuramente non nulli)
@@ -42,7 +41,7 @@
             soundSwitch.setOnClickListener {
                 Log.i(TAG, "Sound switch pressed")
                 mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, mainActivity.settings!!.locale)
-                mainActivity.reference.child("settings").setValue(mainActivity.settings)
+                mainActivity.userReference.child("settings").setValue(mainActivity.settings)
             }
 
             // se hapticSwitch viene cliccato, vengono creati nuovi Settings coi valori aggiornati
@@ -50,7 +49,7 @@
             hapticSwitch.setOnClickListener {
                 Log.i(TAG, "Haptic switch pressed")
                 mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, mainActivity.settings!!.locale)
-                mainActivity.reference.child("settings").setValue(mainActivity.settings)
+                mainActivity.userReference.child("settings").setValue(mainActivity.settings)
             }
 
             // funzione lambda che aggiorna la locale a livello di activity al clic sul bottone,
@@ -84,7 +83,7 @@
                 // non c'è bisogno di aggiornare la lingua qui, in quanto viene aggiornata nel listener
                 // su mainActivity.reference.child("settings")
                 mainActivity.settings = Settings(soundSwitch.isChecked, hapticSwitch.isChecked, newLocale.toString())
-                mainActivity.reference.child("settings").setValue(mainActivity.settings)
+                mainActivity.userReference.child("settings").setValue(mainActivity.settings)
             }
 
             // funzione lambda che ritorna allo startFragment al clic sul bottone
Index: app/src/main/res/layout-land/fragment_game.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:background=\"@color/black\"\r\n    android:padding=\"24dp\"\r\n    tools:context=\".GameFragment\">\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout-land/fragment_game.xml	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/res/layout-land/fragment_game.xml	(date 1619863115003)
@@ -8,4 +8,15 @@
     android:padding="24dp"
     tools:context=".GameFragment">
 
+    <com.devfabiocirelli.spaceinvaders.CustomPlayerShip
+        android:id="@+id/player"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.498"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.875"
+        tools:src="@tools:sample/avatars" />
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-android-extensions'\r\n    id 'com.google.gms.google-services'\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.devfabiocirelli.spaceinvaders\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation 'com.google.firebase:firebase-database-ktx:19.7.0'\r\n    implementation 'com.google.firebase:firebase-auth-ktx:20.0.4'\r\n    def fragment_version = \"1.3.2\"\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.3.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.google.android.material:material:1.3.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'androidx.preference:preference:1.1.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation \"androidx.fragment:fragment-ktx:$fragment_version\"\r\n    testImplementation 'junit:junit:4.+'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/build.gradle	(date 1619857667798)
@@ -37,6 +37,7 @@
 dependencies {
     implementation 'com.google.firebase:firebase-database-ktx:19.7.0'
     implementation 'com.google.firebase:firebase-auth-ktx:20.0.4'
+    implementation 'com.google.firebase:firebase-database:19.7.0'
     def fragment_version = "1.3.2"
 
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"1.8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ .idea/compiler.xml	(date 1619857678858)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="1.8" />
+    <bytecodeTargetLevel target="15" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/devfabiocirelli/spaceinvaders/StartPageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.devfabiocirelli.spaceinvaders\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.ImageButton\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport kotlinx.android.synthetic.main.fragment_start_page.*\r\n\r\nclass StartPageFragment(private val mainActivity: MainActivity) : Fragment() {\r\n    val TAG = \"StartPageFragment\"\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        // Inflate the layout for this fragment\r\n        val rootView = inflater.inflate(R.layout.fragment_start_page, container, false)\r\n        val startBtn = rootView.findViewById<Button>(R.id.startButton)\r\n        val optionsBtn = rootView.findViewById<ImageButton>(R.id.imageButtonOption)\r\n        val newActivityButton = rootView.findViewById<Button>(R.id.newActivity)\r\n\r\n        // funzione lambda che sposterà al fragment che mostra i salvataggi disponibili al clic sul bottone\r\n        startBtn.setOnClickListener {\r\n            Log.i(TAG, \"Start Button Pressed\")\r\n            // TODO: come il codice sotto ma deve far partire il fragment della partita\r\n\r\n            val fragment = GameFragment()\r\n            val fragmentManager = this.requireActivity().supportFragmentManager\r\n            val transaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n            transaction.replace(R.id.contentFragment, fragment)\r\n            transaction.addToBackStack(null)\r\n            transaction.commit()\r\n        }\r\n\r\n        /*resumeButton.setOnClickListener{\r\n            // TODO: recuperare ultima partita dell'utente se disponibile\r\n        }*/\r\n\r\n        newActivityButton.setOnClickListener{\r\n            startActivity(Intent(context, CustomizationActivity::class.java))\r\n        }\r\n\r\n        // funzione lambda che sposta al settingsFragment (aggiungendolo alla backStack) al clic sul bottone\r\n        optionsBtn.setOnClickListener {\r\n            Log.i(TAG, \"Options button pressed\")\r\n\r\n            val fragment = SettingsFragment(mainActivity)\r\n            val fragmentManager = this.requireActivity().supportFragmentManager\r\n            val transaction: FragmentTransaction = fragmentManager.beginTransaction()\r\n            transaction.replace(R.id.contentFragment, fragment)\r\n            transaction.addToBackStack(null)\r\n            transaction.commit()\r\n        }\r\n\r\n        return rootView\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/devfabiocirelli/spaceinvaders/StartPageFragment.kt	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/java/com/devfabiocirelli/spaceinvaders/StartPageFragment.kt	(date 1619862332671)
@@ -10,7 +10,6 @@
 import android.widget.Button
 import android.widget.ImageButton
 import androidx.fragment.app.FragmentTransaction
-import kotlinx.android.synthetic.main.fragment_start_page.*
 
 class StartPageFragment(private val mainActivity: MainActivity) : Fragment() {
     val TAG = "StartPageFragment"
@@ -21,7 +20,7 @@
         val rootView = inflater.inflate(R.layout.fragment_start_page, container, false)
         val startBtn = rootView.findViewById<Button>(R.id.startButton)
         val optionsBtn = rootView.findViewById<ImageButton>(R.id.imageButtonOption)
-        val newActivityButton = rootView.findViewById<Button>(R.id.newActivity)
+        val newActivityButton = rootView.findViewById<Button>(R.id.customizationActivity)
 
         // funzione lambda che sposterà al fragment che mostra i salvataggi disponibili al clic sul bottone
         startBtn.setOnClickListener {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"false\" project-jdk-name=\"15\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ .idea/misc.xml	(date 1619879392578)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="false" project-jdk-name="15" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="false" project-jdk-name="15" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/res/layout-land/activity_customization.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".CustomizationActivity\"\r\n    android:background=\"@color/black\">\r\n\r\n    <ListView\r\n        android:id=\"@+id/list_view_ship\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toStartOf=\"@+id/list_view_color\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintVertical_bias=\"0.0\"/>\r\n\r\n    <ListView\r\n        android:id=\"@+id/list_view_color\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toEndOf=\"@+id/list_view_ship\"\r\n        app:layout_constraintTop_toTopOf=\"parent\"\r\n        app:layout_constraintVertical_bias=\"0.495\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout-land/activity_customization.xml	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/res/layout-land/activity_customization.xml	(date 1619856048478)
@@ -11,16 +11,18 @@
         android:id="@+id/list_view_ship"
         android:layout_width="0dp"
         android:layout_height="0dp"
+        android:orientation="horizontal"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toStartOf="@+id/list_view_color"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent"
-        app:layout_constraintVertical_bias="0.0"/>
+        app:layout_constraintVertical_bias="0.0" />
 
     <ListView
         android:id="@+id/list_view_color"
         android:layout_width="0dp"
         android:layout_height="0dp"
+        android:orientation="horizontal"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toEndOf="@+id/list_view_ship"
Index: app/src/main/java/com/devfabiocirelli/spaceinvaders/customColorView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.devfabiocirelli.spaceinvaders\r\n\r\nimport android.content.Context\r\nimport android.graphics.Canvas\r\nimport android.graphics.Paint\r\nimport android.util.AttributeSet\r\nimport android.view.View\r\n\r\nclass customColorView : View{\r\n\r\n    private val paint = Paint()\r\n\r\n    constructor(context: Context?) : super(context){\r\n\r\n    }\r\n\r\n    constructor(context: Context?, attrs: AttributeSet?) : super(context, attrs){\r\n\r\n    }\r\n\r\n    constructor(context: Context?, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr){\r\n\r\n    }\r\n    //per modificare il colore della custom view\r\n    fun setColor(i: Int){\r\n        paint.setColor(getResources().getColor(i))\r\n        invalidate()\r\n    }\r\n\r\n\r\n    override fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        canvas.drawCircle(width.toFloat()/2, height.toFloat()/2, (height.toFloat())*0.3.toFloat(), paint)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/devfabiocirelli/spaceinvaders/customColorView.kt	(revision 7d4242b5b7f4b183da0c4a56ab64d5d48953b2ae)
+++ app/src/main/java/com/devfabiocirelli/spaceinvaders/customColorView.kt	(date 1619856935659)
@@ -8,7 +8,7 @@
 
 class customColorView : View{
 
-    private val paint = Paint()
+    private val paint = Paint(Paint.ANTI_ALIAS_FLAG)
 
     constructor(context: Context?) : super(context){
 
